{"version":3,"sources":["utils/BigMath.js","CalcField.tsx","useLocalStorage.ts","Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["math","create","all","number","precision","replacements","forEach","name","fn","fnBigNumber","x","multiply","divide","pi","bignumber","typed","map","result","import","override","CalcField","props","inputField","useRef","outputField","useState","value","calc","setCalc","scope","answers","split","line","ans","exp","length","startsWith","BigMath","evaluate","expr","i","index","slice","indexOf","join","style","height","display","TextField","width","autoFocus","multiline","label","placeholder","onChange","event","target","inputRef","inputProps","onScroll","current","scrollTop","overflow","InputProps","variant","flex","marginLeft","readOnly","useLocalStorage","key","initialValue","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","useEffect","handleStorageChange","addEventListener","removeEventListener","newValue","Function","setItem","stringify","dispatchEvent","Event","TabPanel","children","other","role","hidden","id","Box","p","boxSizing","Typography","component","useStyles","makeStyles","theme","root","flexDirection","backgroundColor","palette","background","default","tabPanel","Main","classes","setValue","tabs","setTabs","tabEls","tab","Tab","a11yProps","tabPanels","className","items","AppBar","position","Tabs","scrollButtons","IconButton","onClick","color","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2e90657.chunk.js","sourcesContent":["import { all, create } from \"mathjs\";\r\n\r\nconst math = create(all, {\r\n    number: 'BigNumber',\r\n    precision: 32\r\n});\r\n\r\nexport const evaluate = (expr, scope) => {\r\n    let ans = '';\r\n    for (let i = 0; i < expr.length; i++) {\r\n        if (expr[i] === '/') {\r\n            i++;\r\n            expr = expr.slice(0, i) + '(' + expr.slice(i);\r\n\r\n            let index = expr.indexOf(')', i);\r\n            if (index < 0) {\r\n                index = expr.length;\r\n            }\r\n\r\n            expr = expr.slice(0, index) + ')' + expr.slice(index);\r\n        }\r\n    }\r\n\r\n    expr = expr.split(':').join('/');\r\n\r\n    try {\r\n        ans = math.evaluate(expr, scope);\r\n\r\n        if (typeof ans === 'function') {\r\n            ans = 'Error';\r\n        }\r\n    } catch {\r\n        ans = 'Error';\r\n    }\r\n\r\n    return ans;\r\n};\r\n\r\nlet replacements = {};\r\n\r\nconst fns1 = ['sin', 'cos', 'tan', 'sec', 'cot', 'csc'];\r\nfns1.forEach(function (name) {\r\n    const fn = math[name]\r\n\r\n    const fnBigNumber = function (x) {\r\n        return fn(math.multiply(x, math.divide(math.pi, math.bignumber(180))));\r\n    };\r\n\r\n    // create a typed-function which check the input types\r\n    replacements[name] = math.typed(name, {\r\n        'BigNumber': fnBigNumber,\r\n        'Array | Matrix': function (x) {\r\n            return math.map(x, fnBigNumber)\r\n        }\r\n    });\r\n});\r\n\r\nconst fns2 = ['asin', 'acos', 'atan', 'atan2', 'acot', 'acsc', 'asec'];\r\nfns2.forEach(function (name) {\r\n    const fn = math[name]\r\n\r\n    const fnBigNumber = function (x) {\r\n        const result = fn(x)\r\n        return math.multiply(result, math.divide(math.bignumber(180), math.pi));\r\n    };\r\n\r\n    replacements[name] = math.typed(name, {\r\n        'BigNumber': fnBigNumber,\r\n        'Array | Matrix': function (x) {\r\n            return math.map(x, fnBigNumber)\r\n        }\r\n    })\r\n});\r\n\r\nmath.import(replacements, { override: true });\r\n\r\nexport default math;\r\n\r\nconst functionNames = [\r\n    \"isNumber\",\r\n    \"isComplex\",\r\n    \"isBigNumber\",\r\n    \"isFraction\",\r\n    \"isUnit\",\r\n    \"isString\",\r\n    \"isArray\",\r\n    \"isMatrix\",\r\n    \"isCollection\",\r\n    \"isDenseMatrix\",\r\n    \"isSparseMatrix\",\r\n    \"isRange\",\r\n    \"isIndex\",\r\n    \"isBoolean\",\r\n    \"isResultSet\",\r\n    \"isHelp\",\r\n    \"isFunction\",\r\n    \"isDate\",\r\n    \"isRegExp\",\r\n    \"isObject\",\r\n    \"isNull\",\r\n    \"isUndefined\",\r\n    \"isAccessorNode\",\r\n    \"isArrayNode\",\r\n    \"isAssignmentNode\",\r\n    \"isBlockNode\",\r\n    \"isConditionalNode\",\r\n    \"isConstantNode\",\r\n    \"isFunctionAssignmentNode\",\r\n    \"isFunctionNode\",\r\n    \"isIndexNode\",\r\n    \"isNode\",\r\n    \"isObjectNode\",\r\n    \"isOperatorNode\",\r\n    \"isParenthesisNode\",\r\n    \"isRangeNode\",\r\n    \"isSymbolNode\",\r\n    \"isChain\",\r\n    \"on\",\r\n    \"off\",\r\n    \"once\",\r\n    \"emit\",\r\n    \"config\",\r\n    \"import\",\r\n    \"create\",\r\n    \"factory\",\r\n    \"typed\",\r\n    \"ResultSet\",\r\n    \"BigNumber\",\r\n    \"Complex\",\r\n    \"Fraction\",\r\n    \"Range\",\r\n    \"Matrix\",\r\n    \"DenseMatrix\",\r\n    \"clone\",\r\n    \"isInteger\",\r\n    \"isNegative\",\r\n    \"isNumeric\",\r\n    \"hasNumericValue\",\r\n    \"isPositive\",\r\n    \"isZero\",\r\n    \"isNaN\",\r\n    \"typeOf\",\r\n    \"equalScalar\",\r\n    \"SparseMatrix\",\r\n    \"number\",\r\n    \"string\",\r\n    \"boolean\",\r\n    \"bignumber\",\r\n    \"complex\",\r\n    \"fraction\",\r\n    \"matrix\",\r\n    \"matrixFromFunction\",\r\n    \"matrixFromRows\",\r\n    \"matrixFromColumns\",\r\n    \"splitUnit\",\r\n    \"unaryMinus\",\r\n    \"unaryPlus\",\r\n    \"abs\",\r\n    \"apply\",\r\n    \"addScalar\",\r\n    \"cbrt\",\r\n    \"ceil\",\r\n    \"cube\",\r\n    \"exp\",\r\n    \"expm1\",\r\n    \"fix\",\r\n    \"floor\",\r\n    \"gcd\",\r\n    \"lcm\",\r\n    \"log10\",\r\n    \"log2\",\r\n    \"mod\",\r\n    \"multiplyScalar\",\r\n    \"multiply\",\r\n    \"nthRoot\",\r\n    \"sign\",\r\n    \"sqrt\",\r\n    \"square\",\r\n    \"subtract\",\r\n    \"xgcd\",\r\n    \"dotMultiply\",\r\n    \"bitAnd\",\r\n    \"bitNot\",\r\n    \"bitOr\",\r\n    \"bitXor\",\r\n    \"arg\",\r\n    \"conj\",\r\n    \"im\",\r\n    \"re\",\r\n    \"not\",\r\n    \"or\",\r\n    \"xor\",\r\n    \"concat\",\r\n    \"column\",\r\n    \"count\",\r\n    \"cross\",\r\n    \"diag\",\r\n    \"filter\",\r\n    \"flatten\",\r\n    \"forEach\",\r\n    \"getMatrixDataType\",\r\n    \"identity\",\r\n    \"kron\",\r\n    \"map\",\r\n    \"diff\",\r\n    \"ones\",\r\n    \"range\",\r\n    \"reshape\",\r\n    \"resize\",\r\n    \"rotate\",\r\n    \"rotationMatrix\",\r\n    \"row\",\r\n    \"size\",\r\n    \"squeeze\",\r\n    \"subset\",\r\n    \"transpose\",\r\n    \"ctranspose\",\r\n    \"zeros\",\r\n    \"erf\",\r\n    \"mode\",\r\n    \"prod\",\r\n    \"format\",\r\n    \"bin\",\r\n    \"oct\",\r\n    \"hex\",\r\n    \"print\",\r\n    \"to\",\r\n    \"isPrime\",\r\n    \"numeric\",\r\n    \"divideScalar\",\r\n    \"pow\",\r\n    \"round\",\r\n    \"log\",\r\n    \"log1p\",\r\n    \"nthRoots\",\r\n    \"dotPow\",\r\n    \"dotDivide\",\r\n    \"lsolve\",\r\n    \"usolve\",\r\n    \"lsolveAll\",\r\n    \"usolveAll\",\r\n    \"leftShift\",\r\n    \"rightArithShift\",\r\n    \"rightLogShift\",\r\n    \"and\",\r\n    \"compare\",\r\n    \"compareNatural\",\r\n    \"compareText\",\r\n    \"equal\",\r\n    \"equalText\",\r\n    \"smaller\",\r\n    \"smallerEq\",\r\n    \"larger\",\r\n    \"largerEq\",\r\n    \"deepEqual\",\r\n    \"unequal\",\r\n    \"partitionSelect\",\r\n    \"sort\",\r\n    \"max\",\r\n    \"min\",\r\n    \"ImmutableDenseMatrix\",\r\n    \"Index\",\r\n    \"FibonacciHeap\",\r\n    \"Spa\",\r\n    \"Unit\",\r\n    \"unit\",\r\n    \"sparse\",\r\n    \"createUnit\",\r\n    \"acos\",\r\n    \"acosh\",\r\n    \"acot\",\r\n    \"acoth\",\r\n    \"acsc\",\r\n    \"acsch\",\r\n    \"asec\",\r\n    \"asech\",\r\n    \"asin\",\r\n    \"asinh\",\r\n    \"atan\",\r\n    \"atan2\",\r\n    \"atanh\",\r\n    \"cos\",\r\n    \"cosh\",\r\n    \"cot\",\r\n    \"coth\",\r\n    \"csc\",\r\n    \"csch\",\r\n    \"sec\",\r\n    \"sech\",\r\n    \"sin\",\r\n    \"sinh\",\r\n    \"tan\",\r\n    \"tanh\",\r\n    \"setCartesian\",\r\n    \"setDifference\",\r\n    \"setDistinct\",\r\n    \"setIntersect\",\r\n    \"setIsSubset\",\r\n    \"setMultiplicity\",\r\n    \"setPowerset\",\r\n    \"setSize\",\r\n    \"setSymDifference\",\r\n    \"setUnion\",\r\n    \"add\",\r\n    \"hypot\",\r\n    \"norm\",\r\n    \"dot\",\r\n    \"trace\",\r\n    \"index\",\r\n    \"Node\",\r\n    \"AccessorNode\",\r\n    \"ArrayNode\",\r\n    \"AssignmentNode\",\r\n    \"BlockNode\",\r\n    \"ConditionalNode\",\r\n    \"ConstantNode\",\r\n    \"FunctionAssignmentNode\",\r\n    \"IndexNode\",\r\n    \"ObjectNode\",\r\n    \"OperatorNode\",\r\n    \"ParenthesisNode\",\r\n    \"RangeNode\",\r\n    \"RelationalNode\",\r\n    \"SymbolNode\",\r\n    \"FunctionNode\",\r\n    \"parse\",\r\n    \"compile\",\r\n    \"evaluate\",\r\n    \"Parser\",\r\n    \"parser\",\r\n    \"lup\",\r\n    \"qr\",\r\n    \"slu\",\r\n    \"lusolve\",\r\n    \"Help\",\r\n    \"Chain\",\r\n    \"help\",\r\n    \"chain\",\r\n    \"det\",\r\n    \"inv\",\r\n    \"eigs\",\r\n    \"expm\",\r\n    \"sqrtm\",\r\n    \"divide\",\r\n    \"distance\",\r\n    \"intersect\",\r\n    \"sum\",\r\n    \"mean\",\r\n    \"median\",\r\n    \"mad\",\r\n    \"variance\",\r\n    \"quantileSeq\",\r\n    \"std\",\r\n    \"combinations\",\r\n    \"combinationsWithRep\",\r\n    \"gamma\",\r\n    \"factorial\",\r\n    \"kldivergence\",\r\n    \"multinomial\",\r\n    \"permutations\",\r\n    \"pickRandom\",\r\n    \"random\",\r\n    \"randomInt\",\r\n    \"stirlingS2\",\r\n    \"bellNumbers\",\r\n    \"catalan\",\r\n    \"composition\",\r\n    \"simplify\",\r\n    \"derivative\",\r\n    \"rationalize\",\r\n    \"reviver\",\r\n    \"replacer\",\r\n    \"ArgumentsError\",\r\n    \"DimensionError\",\r\n    \"IndexError\"\r\n];","import { TextField } from '@material-ui/core'\r\nimport { ChangeEvent, UIEvent, useRef, useState } from 'react'\r\nimport BigMath, { evaluate } from './utils/BigMath';\r\n\r\nfunction getTextWidth(text: string, font?: string) {\r\n    const canvas = document.createElement('canvas');\r\n    const context = canvas.getContext('2d');\r\n\r\n    if (context) {\r\n        context.font = font || getComputedStyle(document.body).font;\r\n        return context.measureText(text).width;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\ntype CalcFieldProps = {\r\n    value: string,\r\n    onChange: (value: string) => void\r\n};\r\n\r\nconst CalcField = (props: CalcFieldProps) => {\r\n    const inputField = useRef<HTMLTextAreaElement>();\r\n    const outputField = useRef<HTMLTextAreaElement>();\r\n    const [calc, setCalc] = useState(props.value ?? '');\r\n    let scope = {};\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setCalc(event.target.value);\r\n\r\n        if (props.onChange)\r\n            props.onChange(event.target.value);\r\n    };\r\n\r\n    const handleScroll = (event: UIEvent<HTMLTextAreaElement>) => {\r\n        if (inputField.current && outputField.current) {\r\n            outputField.current.scrollTop = inputField.current.scrollTop;\r\n        }\r\n    };\r\n\r\n    const answers = calc.split(/\\r?\\n/).map((line) => {\r\n        let ans = '';\r\n        let exp = line;\r\n\r\n        if (exp.length && !exp.startsWith('//') && BigMath.evaluate) {\r\n            ans = evaluate(exp, scope);\r\n        }\r\n\r\n        return line + ' = ' + ans;\r\n    }).join('\\n');\r\n\r\n    return (\r\n        <div style={{ height: '100%', display: 'flex' }}>\r\n            <TextField\r\n                style={{ width: '50%', height: '100%' }}\r\n                autoFocus\r\n                multiline\r\n                label=\"Calculation\"\r\n                placeholder=\"x = 5...\"\r\n                value={calc}\r\n                onChange={handleChange}\r\n                inputRef={inputField}\r\n                inputProps={{ onScroll: handleScroll, style: { width: '100%', height: '100%', overflow: 'auto' } }}\r\n                InputProps={{ style: { width: '100%', height: '100%' } }}\r\n                variant=\"outlined\"></TextField>\r\n            <TextField\r\n                style={{ flex: '1 1 auto', marginLeft: '10px' }}\r\n                multiline\r\n                label=\"Answers\"\r\n                variant=\"outlined\"\r\n                value={answers}\r\n                inputRef={outputField}\r\n                InputProps={{ style: { width: '100%', height: '100%' } }}\r\n                inputProps={{ readOnly: true, style: { width: '100%', height: '100%' } }}></TextField>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalcField\r\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react'\r\n\r\ntype SetValue<T> = Dispatch<SetStateAction<T>>\r\n\r\nfunction useLocalStorage<T>(key: string, initialValue: T): [T, SetValue<T>] {\r\n  // Get from local storage then\r\n  // parse stored json or return initialValue\r\n  const readValue = (): T => {\r\n    // Prevent build error \"window is undefined\" but keep keep working\r\n    if (typeof window === 'undefined') {\r\n      return initialValue\r\n    }\r\n\r\n    try {\r\n      const item = window.localStorage.getItem(key)\r\n      return item ? (JSON.parse(item) as T) : initialValue\r\n    } catch (error) {\r\n      console.warn(`Error reading localStorage key “${key}”:`, error)\r\n      return initialValue\r\n    }\r\n  }\r\n\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState<T>(readValue)\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue: SetValue<T> = value => {\r\n    // Prevent build error \"window is undefined\" but keeps working\r\n    if (typeof window == 'undefined') {\r\n      console.warn(\r\n        `Tried setting localStorage key “${key}” even though environment is not a client`,\r\n      )\r\n    }\r\n\r\n    try {\r\n      // Allow value to be a function so we have the same API as useState\r\n      const newValue = value instanceof Function ? value(storedValue) : value\r\n\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(newValue))\r\n\r\n      // Save state\r\n      setStoredValue(newValue)\r\n\r\n      // We dispatch a custom event so every useLocalStorage hook are notified\r\n      window.dispatchEvent(new Event('local-storage'))\r\n    } catch (error) {\r\n      console.warn(`Error setting localStorage key “${key}”:`, error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setStoredValue(readValue())\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const handleStorageChange = () => {\r\n      setStoredValue(readValue())\r\n    }\r\n\r\n    // this only works for other documents, not the current one\r\n    window.addEventListener('storage', handleStorageChange)\r\n\r\n    // this is a custom event, triggered in writeValueToLocalStorage\r\n    window.addEventListener('local-storage', handleStorageChange)\r\n\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange)\r\n      window.removeEventListener('local-storage', handleStorageChange)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  return [storedValue, setValue]\r\n}\r\n\r\nexport default useLocalStorage","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport CalcField from './CalcField';\r\nimport { IconButton } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport useLocalStorage from './useLocalStorage';\r\n\r\ntype TabPanelProps = {\r\n    children?: React.ReactNode,\r\n    index: any,\r\n    value: any,\r\n    className?: string\r\n};\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3} height=\"100%\" boxSizing=\"border-box\">\r\n                    <Typography component={'span'} style={{ height: '100%' }}>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction a11yProps(index: any) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n        backgroundColor: theme.palette.background.default\r\n    },\r\n    tabPanel: {\r\n        flex: '1 1 auto'\r\n    }\r\n}));\r\n\r\nexport default function Main() {\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState(0);\r\n    const [tabs, setTabs] = useLocalStorage<string[]>('tabs', []);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: any) => {\r\n        setValue(newValue);\r\n    };\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setTabs([...tabs, '']);\r\n    };\r\n\r\n    const tabEls = tabs.map((tab, index) => {\r\n        return <Tab key={index} label={`Calc ${index}`} {...a11yProps(index)} />\r\n    });\r\n\r\n    const tabPanels = tabs.map((tab, index) => {\r\n        const handleChange = (value: string) => {\r\n            let items = [...tabs];\r\n            items[index] = value;\r\n            setTabs(items);\r\n        };\r\n\r\n        return <TabPanel key={index} className={classes.tabPanel} value={value} index={index}>\r\n            <CalcField value={tab} onChange={handleChange} />\r\n        </TabPanel>\r\n    });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Tabs\r\n                    variant=\"scrollable\"\r\n                    scrollButtons=\"auto\"\r\n                    value={value}\r\n                    onChange={handleChange} aria-label=\"simple tabs example\">\r\n                    {tabEls}\r\n                    <IconButton onClick={handleClick}>\r\n                        <AddIcon style={{ color: 'white' }} />\r\n                    </IconButton>\r\n                </Tabs>\r\n            </AppBar>\r\n            {tabPanels}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}